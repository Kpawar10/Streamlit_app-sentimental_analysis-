# -*- coding: utf-8 -*-
"""sentimental analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JW6QY_ufHknauUfMF778m1Vc1L0tsD5U
"""

#installing kaggle library
! pip install kaggle

# configuring path of kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#api command
!kaggle datasets download -d bwandowando/3-million-instagram-google-store-reviews

#extracting zip file
from zipfile import ZipFile
dataset = '/content/3-million-instagram-google-store-reviews.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('extracted')

!pip install emoji

#required libraries
import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from nltk.corpus import wordnet
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('omw-1.4')

sw = set(stopwords.words('english')) - {'not', 'no', 'nor'}
print(sw)

df=pd.read_csv('/content/INSTAGRAM_REVIEWS.csv',encoding= 'ISO-8859-1')

df.shape

df.head()

df.isnull().sum()

df.dropna(subset=['review_text'], inplace=True)  # Drop missing reviews

df['author_app_version'] = df['author_app_version'].fillna('unknown') # Fill Nan Values

df.isnull().sum()

df.shape

df.head()

df['review_rating'].value_counts()

#labelling the ratings
def label_sentiment(rating):
    if rating >= 4:
        return 'positive review'
    elif rating == 3:
        return 'neutral review'
    else:
        return 'negative review'

df['sentiment'] = df['review_rating'].apply(label_sentiment)
print(df['sentiment'].value_counts())

import emoji

def convert_emojis(text):
    return emoji.demojize(text, delimiters=(" ", " "))

#port_stem=PorterStemmer()
#def stemming(content):
 # stemmed_content=re.sub('[^a-zA-Z]',' ',content)
  #stemmed_content=stemmed_content.lower()
  #stemmed_content=stemmed_content.split()
 # stemmed_content=[port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  #stemmed_content=' '.join(stemmed_content)
 # return stemmed_content

lemmatizer = WordNetLemmatizer()
custom_stopwords = set(stopwords.words('english')) - {'not', 'no', 'nor'}

def lemmatize_review(content):
    content = convert_emojis(content)
    cleaned = re.sub('[^a-zA-Z]', ' ', content)  # Keep only letters
    cleaned = cleaned.lower()
    words = cleaned.split()
    words = [lemmatizer.lemmatize(word) for word in words if word not in custom_stopwords]
    return ' '.join(words)

df['stemmed_content']=df['review_text'].apply(lemmatize_review)

# Clean missing stemmed_content first
df = df[df['stemmed_content'].notna()]
df = df[df['stemmed_content'].str.strip() != '']

df.head()

from sklearn.utils import resample

df_pos = df[df['sentiment'] == 'positive review']
df_neg =df[df['sentiment'] == 'negative review']
df_neu = df[df['sentiment'] == 'neutral review']

df_neg_upsampled = resample(df_neg,
                            replace=True,
                            n_samples=len(df_pos),
                            random_state=42)

df_neu_upsampled = resample(df_neu,
                            replace=True,
                            n_samples=len(df_pos),
                            random_state=42)

df_balanced = pd.concat([df_pos, df_neg_upsampled, df_neu_upsampled])

# âœ… Sample here to reduce runtime (e.g., during development)
df_balanced = df_balanced.sample(5000, random_state=42)

print("Sampled sentiment class counts:")
print(df_balanced['sentiment'].value_counts())

vectorizer = TfidfVectorizer(ngram_range=(1,2), max_features=20000)
X = vectorizer.fit_transform(df_balanced['stemmed_content'])

#import spacy
#nlp = spacy.load('en_core_web_md')

#texts = df_balanced['stemmed_content'].tolist()

# ##Fast batch vectorization
#doc_vectors = []
#for doc in nlp.pipe(texts, batch_size=512, disable=["ner", "parser", "tagger"]):
 #   doc_vectors.append(doc.vector)

#X = np.vstack(doc_vectors)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(df_balanced['sentiment'])

print(X)

print(y)

X_train, X_test, y_train, y_test, idx_train, idx_test = train_test_split(
    X, y, df_balanced.index,
    test_size=0.2,
    stratify=y,
    random_state=42
)

print(X.shape,X_train.shape,X_test.shape)

print(X_train.shape[0], y_train.shape[0])

print(X_train)

print(X_test)

print(df.shape)
print(df['review_rating'].shape)

print(df_balanced['sentiment'].shape)

#print(df_balanced['stemmed_content'].iloc[<index>])

#training the model
model = RandomForestClassifier(n_estimators=100, random_state=42)

model.fit(X_train,y_train)

RandomForestClassifier(class_weight='balanced')

#accuracy score on training model
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

#accuracy score on test model
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

baseline_accuracy = df_balanced['sentiment'].value_counts(normalize=True).max()
print(baseline_accuracy)

import pickle

filename='trained_model.sav'
pickle.dump(model,open(filename,'wb'))

#loading saved model
loaded_model=pickle.load(open('trained_model.sav','rb'))

X_new=X_test[2]
print(y_test[2])
prediction = model.predict(X_new.reshape(1, -1))

sentiment = le.inverse_transform(prediction)[0]
print("Predicted Sentiment:", sentiment)

X_new=X_test[11]
print(y_test[11])
prediction = model.predict(X_new.reshape(1, -1))

sentiment = le.inverse_transform(prediction)[0]
print("Predicted Sentiment:", sentiment)

X_new=X_test[24]
print(y_test[24])
prediction = model.predict(X_new.reshape(1, -1))

sentiment = le.inverse_transform(prediction)[0]
print("Predicted Sentiment:", sentiment)

test_idx = idx_test[3]  # This gives actual index from df_balanced
original_review = df_balanced.loc[test_idx, 'review_text']
preprocessed = df_balanced.loc[test_idx, 'stemmed_content']
actual_label = le.inverse_transform([y_test[3]])[0]

print("Original review:", original_review)
print("Preprocessed:", preprocessed)
print("Actual Sentiment:", actual_label)
print("Predicted Sentiment:", sentiment)

original_index = idx_test[11]
row = df_balanced.loc[original_index]

print("Review Rating     :", row['review_rating'])
print("True Sentiment    :", row['sentiment'])
print("Review Text       :", row['review_text'])

X_new = X_test[11]
proba = model.predict_proba(X_new.reshape(1, -1))

print("Model Confidence  :", proba[0])

prediction = model.predict(X_new.reshape(1, -1))
print("Predicted Sentiment:", le.inverse_transform(prediction)[0])

proba = model.predict_proba(X_new.reshape(1, -1))

print("Class Probabilities:", proba)
print("Predicted Label:", le.inverse_transform([np.argmax(proba)]))

import pickle

# Save the trained model
with open('sentiment_model.pkl', 'wb') as f:
    pickle.dump(model, f)

# Save the vectorizer
with open('vectorizer.pkl', 'wb') as f:
    pickle.dump(vectorizer, f)

